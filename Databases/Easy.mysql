
# Combine 2 tables

SELECT 
    firstName, lastName, City, state
FROM
    Person
LEFT JOIN
    Address
ON
    Person.personId = Address.personId;

# 181. Employees Earning More Than Their Managers

SELECT 
    E.name AS 'Employee'
FROM 
    Employee AS E, Employee AS M
WHERE 
    E.managerId = M.Id 
AND
    E.salary > M.salary;

# 182. Duplicate Emails

SELECT 
    email AS 'Email'
FROM 
    Person
GROUP BY 
    email
HAVING COUNT(*) > 1;

# 183. Customers Who Never Order

SELECT 
    name AS 'Customers'
FROM 
    Customers C
LEFT JOIN 
    Orders O
ON 
    O.customerId = C.id
WHERE 
    o.id IS Null;

SELECT 
    name AS 'Customers'
FROM 
    Customers C
WHERE 
    C.id NOT IN (
            SELECT 
                O.customerId 
            FROM 
                Orders O);

SELECT 
    name AS 'Customers'
FROM 
    Customers C
WHERE NOT EXISTs (
    SELECT * 
    FROM 
        Orders O
    WHERE 
        C.id = O.customerId);

# 196. Delete Duplicate Emails

DELETE 
    P 
FROM 
    Person P
JOIN 
    Person E
WHERE 
    P.email = E.email
AND 
    P.id > E.id;


#197. Rising Temperature

SELECT w1.Id
FROM weather w1, weather w2
WHERE DATE_SUB(w1.recordDate, interval 1 Day) = w2.recordDate 
AND w1.temperature > w2.temperature;

SELECT w1.id
FROM Weather w1, Weather w2
WHERE w1.temperature > w2.temperature 
AND DATEDIFF(w1.recordDate, w2.recordDate) =1;

# big country

SELECT name, population, area
FROM World
WHERE area >=3000000 OR population >=25000000;

# classes with more than 5 students
SELECT class
FROM Courses
GROUP BY class
HAVING COUNT(student)>=5;

# not boring movies

SELECT id, movie, description, rating
FROM Cinema
WHERE description != 'boring'
    AND ID%2 != 0
ORDER BY rating DESC;

# update f/M
UPDATE salary
SET sex = IF(sex='f', 'm', 'f');

UPDATE salary
SET sex = CASE sex
    WHEN 'f' THEN 'm'
    ELSE 'm'
    END;


# reformat tables


SELECT id,
       SUM(IF(month = 'Jan', revenue, null)) AS Jan_Revenue,
       SUM(IF(month = 'Feb', revenue, null)) AS Feb_Revenue,
       SUM(IF(month = 'Mar', revenue, null)) AS Mar_Revenue,
       SUM(IF(month = 'Apr', revenue, null)) AS Apr_Revenue,
       SUM(IF(month = 'May', revenue, null)) AS May_Revenue,
       SUM(IF(month = 'Jun', revenue, null)) AS Jun_Revenue,
       SUM(IF(month = 'Jul', revenue, null)) AS Jul_Revenue,
       SUM(IF(month = 'Aug', revenue, null)) AS Aug_Revenue,
       SUM(IF(month = 'Sep', revenue, null)) AS Sep_Revenue,
       SUM(IF(month = 'Oct', revenue, null)) AS Oct_Revenue,
       SUM(IF(month = 'Nov', revenue, null)) AS Nov_Revenue,
       SUM(IF(month = 'Dec', revenue, null)) AS Dec_Revenue
FROM Department
GROUP BY id;


# referee id

SELECT name
FROM Customer
WHERE referee_id != 2 OR referee_id IS Null;

# customer with max Orders

SELECT customer_number
FROM Orders
GROUP BY customer_number
ORDER BY COUNT(*) DESC
LIMIT 1;


# Sales person

SELECT name
FROM Salesperson
WHERE sales_id NOT IN (
    SELECT sales_id
    FROM Orders o
    JOIN Company c
    ON o.com_id = c.com_id
    WHERE c.name = 'Red'
    );



# ActorDirector

SELECT actor_id, director_id
FROM ActorDirector
GROUP BY actor_id, director_id
HAVING COUNT(*) >=3;


# product sold only in spring time

SELECT 
    product_id, product_name
FROM 
    Product p
WHERE 
    product_id NOT IN 
(
    SELECT 
        product_id
    FROM 
        Sales s
    WHERE 
        s.sale_date 
    NOT BETWEEN 
        '2019-01-01' 
    AND 
        '2019-03-31'
);